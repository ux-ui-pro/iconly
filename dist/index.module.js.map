{"mappings":"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","sources":["src/index.ts"],"sourcesContent":["class Iconly {\n  static #dbInstance: Promise<IDBDatabase> | null = null;\n\n  #options: {\n    file: string;\n    version: string;\n    debug: boolean;\n    container: HTMLElement;\n  };\n\n  constructor(options: { file?: string; version?: string; debug?: boolean; container?: string | HTMLElement } = {}) {\n    const defaultOptions = {\n      file: './icons.svg',\n      version: '1.0',\n      debug: false,\n      container: document.body ?? document.documentElement,\n    };\n\n    this.#options = {\n      ...defaultOptions,\n      ...options,\n      container: typeof options.container === 'string'\n        ? document.querySelector(options.container) ?? defaultOptions.container\n        : options.container ?? defaultOptions.container,\n    };\n\n    if (!this.#options.container) {\n      throw new Error('Invalid container element');\n    }\n\n    if (!Iconly.#dbInstance) {\n      Iconly.#dbInstance = this.#openDB('iconlyDB', 1);\n    }\n  }\n\n  async #openDB(name: string, version: number): Promise<IDBDatabase> {\n    if (!('indexedDB' in window)) {\n      this.#logError('This browser doesn\\'t support IndexedDB');\n      throw new Error('IndexedDB not supported');\n    }\n\n    return new Promise<IDBDatabase>((resolve, reject) => {\n      const request = indexedDB.open(name, version);\n\n      request.onerror = () => reject(new Error(`IndexedDB error: ${request.error}`));\n      request.onupgradeneeded = (event: IDBVersionChangeEvent) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n        if (!db.objectStoreNames.contains('icons')) {\n          db.createObjectStore('icons', { keyPath: 'version' });\n        }\n      };\n      request.onsuccess = () => resolve(request.result);\n    });\n  }\n\n  static async #fetchData(file: string): Promise<string> {\n    const response = await fetch(file);\n    if (!response.ok) throw new Error('Network response was not ok');\n    return response.text();\n  }\n\n  #insert(data: string): void {\n    let iconSetDiv = document.getElementById('iconset');\n\n    if (!iconSetDiv) {\n      iconSetDiv = document.createElement('div');\n      iconSetDiv.id = 'iconset';\n      iconSetDiv.setAttribute('aria-hidden', 'true');\n      iconSetDiv.style.cssText = 'width: 0; height: 0; position: absolute; left: -9999px;';\n      this.#options.container.appendChild(iconSetDiv);\n    }\n\n    iconSetDiv.innerHTML = data;\n  }\n\n  async init(): Promise<void> {\n    const { file, version } = this.#options;\n\n    try {\n      let data = await Iconly.#fetchData(file);\n\n      const db = await Iconly.#dbInstance;\n      const tx = db.transaction('icons', 'readwrite');\n      const store = tx.objectStore('icons');\n\n      const dbVersion = await new Promise<{ version: string; data: string } | undefined>((resolve, reject) => {\n        const request = store.get(version);\n\n        request.onsuccess = () => resolve(request.result);\n        request.onerror = () => reject(request.error);\n      });\n\n      if (!(dbVersion && dbVersion.data)) {\n        await new Promise<void>((resolve, reject) => {\n          const request = store.put({ version, data });\n\n          request.onsuccess = () => resolve();\n          request.onerror = () => reject(request.error);\n        });\n      } else {\n        data = dbVersion.data;\n      }\n\n      await new Promise<void>((resolve, reject) => {\n        tx.oncomplete = () => resolve();\n        tx.onerror = () => reject(tx.error);\n        tx.onabort = () => reject(tx.error);\n      });\n\n      this.#insert(data);\n    } catch (error) {\n      this.#logError('Error initializing Iconly:', error);\n    }\n  }\n\n  #logError(...messages: unknown[]): void {\n    if (this.#options.debug) {\n      // eslint-disable-next-line no-console\n      console.error(...messages);\n    }\n  }\n}\n\nexport default Iconly;\n"],"names":[],"version":3,"file":"index.module.js.map"}